<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>แดชบอร์ดข้อมูลลูกค้า</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6;
            color: #1f2937;
        }
        .card {
            background-color: white;
            padding: 1.5rem;
            border-radius: 1rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .table-container {
            overflow-x: auto;
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        thead th {
            background-color: #e5e7eb;
            text-align: left;
            padding: 0.75rem 1rem;
            font-weight: 600;
        }
        tbody tr:nth-child(odd) {
            background-color: #f9fafb;
        }
        tbody td {
            padding: 0.75rem 1rem;
            border-bottom: 1px solid #e5e7eb;
        }
        .chart-container {
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
            padding: 1rem;
        }
        .chart-legend {
            margin-top: 1rem;
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 1rem;
            font-size: 0.875rem;
        }
    </style>
</head>
<body class="p-6 md:p-10">

    <div class="max-w-7xl mx-auto space-y-8">

        <!-- Header -->
        <header class="text-center mb-10">
            <h1 class="text-4xl md:text-5xl font-extrabold text-gray-800">แดชบอร์ดข้อมูลลูกค้า</h1>
            <p class="mt-2 text-base text-gray-500">สรุปข้อมูลเชิงลึกด้านพฤติกรรมผู้บริโภค</p>
        </header>

        <!-- Loading Indicator -->
        <div id="loading-indicator" class="mt-4 text-center text-blue-500 font-medium">
            กำลังโหลดข้อมูลจาก Google Sheets...
        </div>

        <!-- Summary Cards -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <div class="card text-center bg-blue-100/50 border-2 border-blue-200">
                <p class="text-sm font-medium text-gray-500 uppercase tracking-wide">จำนวนผู้ใช้งานทั้งหมด</p>
                <p id="total-users" class="mt-2 text-4xl font-bold text-blue-600">-</p>
            </div>
            <div class="card text-center bg-green-100/50 border-2 border-green-200">
                <p class="text-sm font-medium text-gray-500 uppercase tracking-wide">คะแนนความพึงพอใจเฉลี่ย</p>
                <p id="avg-satisfaction" class="mt-2 text-4xl font-bold text-green-600">-</p>
            </div>
            <div class="card text-center bg-purple-100/50 border-2 border-purple-200">
                <p class="text-sm font-medium text-gray-500 uppercase tracking-wide">ค่าใช้จ่ายเฉลี่ยต่อคน</p>
                <p id="avg-spending" class="mt-2 text-4xl font-bold text-purple-600">-</p>
            </div>
            <div class="card text-center bg-yellow-100/50 border-2 border-yellow-200">
                <p class="text-sm font-medium text-gray-500 uppercase tracking-wide">ความถี่ในการซื้อเฉลี่ย</p>
                <p id="avg-frequency" class="mt-2 text-4xl font-bold text-yellow-600">-</p>
            </div>
        </div>

        <!-- Charts Section -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mt-8">
            <!-- Platform Pie Chart -->
            <div class="card">
                <h2 class="text-2xl font-bold text-gray-800 mb-4 text-center">สัดส่วนลูกค้าตามแพลตฟอร์มที่ต้องการ</h2>
                <div class="chart-container">
                    <canvas id="pie-chart-canvas" width="250" height="250"></canvas>
                    <div id="pie-chart-legend" class="chart-legend"></div>
                </div>
            </div>

            <!-- Shopping Frequency Bar Chart -->
            <div class="card">
                <h2 class="text-2xl font-bold text-gray-800 mb-4 text-center">จำนวนลูกค้าตามความถี่ในการซื้อ</h2>
                <div class="chart-container">
                    <canvas id="bar-chart-canvas" width="400" height="250"></canvas>
                    <div id="bar-chart-legend" class="chart-legend"></div>
                </div>
            </div>
        </div>

        <!-- Data Table Section -->
        <div class="card mt-8">
            <h2 class="text-2xl font-bold text-gray-800 mb-4">ข้อมูลลูกค้าทั้งหมด</h2>
            <div class="mb-4">
                <input type="text" id="filter-input" placeholder="ค้นหาข้อมูล..." class="w-full md:w-1/2 p-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
            </div>
            <div class="table-container rounded-lg border">
                <table id="data-table">
                    <thead>
                        <!-- Table headers will be generated by JS -->
                    </thead>
                    <tbody>
                        <!-- Table rows will be generated by JS -->
                    </tbody>
                </table>
            </div>
        </div>

    </div>

    <script>
        // Global variables to hold the parsed data and table headers
        let parsedData = [];
        let headers = [];

        // Thai mapping for table headers
        const thaiHeaders = {
            'customer_id': 'รหัสลูกค้า',
            'age': 'อายุ',
            'gender': 'เพศ',
            'income_level': 'รายได้',
            'education': 'การศึกษา',
            'location': 'สถานที่',
            'shopping_frequency': 'ความถี่',
            'preferred_platform': 'แพลตฟอร์ม',
            'avg_spending': 'ค่าใช้จ่ายเฉลี่ย',
            'payment_method': 'ช่องทางชำระ',
            'product_category': 'หมวดสินค้า',
            'satisfaction_score': 'คะแนนความพึงพอใจ',
            'recommendation_likelihood': 'แนวโน้มแนะนำ',
            'last_purchase_days': 'วันที่ซื้อล่าสุด',
        };

        // --- Data Processing and Rendering Functions ---
        
        // Function to parse CSV string into an array of objects
        function parseCsv(csvString) {
            const lines = csvString.trim().split('\n');
            headers = lines[0].split(',').map(h => h.trim());
            return lines.slice(1).map(line => {
                const values = line.split(',');
                return headers.reduce((obj, header, index) => {
                    obj[header] = values[index] ? values[index].trim() : '';
                    return obj;
                }, {});
            });
        }

        // Function to render summary cards
        function renderSummaryCards(data) {
            const totalUsers = data.length;
            const avgSatisfaction = totalUsers > 0 ? (data.reduce((sum, item) => sum + parseFloat(item.satisfaction_score), 0) / totalUsers).toFixed(2) : '-';
            const avgSpending = totalUsers > 0 ? (data.reduce((sum, item) => sum + parseFloat(item.avg_spending), 0) / totalUsers).toFixed(0) : '-';
            
            const frequencyMap = {};
            if (totalUsers > 0) {
                data.forEach(item => {
                    const freq = item.shopping_frequency;
                    frequencyMap[freq] = (frequencyMap[freq] || 0) + 1;
                });
            }
            const mostFrequent = Object.keys(frequencyMap).length > 0 ? Object.keys(frequencyMap).reduce((a, b) => frequencyMap[a] > frequencyMap[b] ? a : b, '') : '-';

            document.getElementById('total-users').textContent = `${totalUsers}`;
            document.getElementById('avg-satisfaction').textContent = avgSatisfaction;
            document.getElementById('avg-spending').textContent = `${avgSpending} บาท`;
            document.getElementById('avg-frequency').textContent = mostFrequent;
        }

        // Function to render the pie chart for preferred platforms
        function renderPieChart(data) {
            const canvas = document.getElementById('pie-chart-canvas');
            const legend = document.getElementById('pie-chart-legend');
            const ctx = canvas.getContext('2d');
            
            // Clear previous chart
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            legend.innerHTML = '';

            if (!data || data.length === 0) {
                return;
            }

            const platformCounts = {};
            data.forEach(item => {
                const platform = item.preferred_platform;
                if (platform && typeof platform === 'string' && platform.trim() !== '') {
                    platformCounts[platform] = (platformCounts[platform] || 0) + 1;
                }
            });

            const platforms = Object.keys(platformCounts);
            const totalCount = data.length;
            if (totalCount === 0 || platforms.length === 0) {
                return;
            }

            const colors = ['#3B82F6', '#22C55E', '#EF4444', '#F59E0B', '#8B5CF6', '#EC4899'];
            let currentAngle = 0;
            const centerX = canvas.width / 2;
            const centerY = canvas.height / 2;
            const radius = Math.min(centerX, centerY) * 0.8;

            platforms.forEach((platform, index) => {
                const count = platformCounts[platform];
                const sliceAngle = (count / totalCount) * 2 * Math.PI;
                const percentage = ((count / totalCount) * 100).toFixed(1);
                const color = colors[index % colors.length];

                // Draw pie slice
                ctx.beginPath();
                ctx.moveTo(centerX, centerY);
                ctx.arc(centerX, centerY, radius, currentAngle, currentAngle + sliceAngle);
                ctx.closePath();
                ctx.fillStyle = color;
                ctx.fill();

                // Draw percentage label (optional but good for context)
                const labelAngle = currentAngle + sliceAngle / 2;
                const labelX = centerX + Math.cos(labelAngle) * (radius / 1.5);
                const labelY = centerY + Math.sin(labelAngle) * (radius / 1.5);
                ctx.fillStyle = 'white';
                ctx.font = '14px Inter';
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                if (percentage > 5) { // Only show label for larger slices
                    ctx.fillText(`${percentage}%`, labelX, labelY);
                }

                // Create legend item
                const legendItem = document.createElement('div');
                legendItem.className = 'flex items-center gap-2';
                legendItem.innerHTML = `
                    <div class="w-3 h-3 rounded-full" style="background-color: ${color};"></div>
                    <span>${platform} (${count})</span>
                `;
                legend.appendChild(legendItem);

                currentAngle += sliceAngle;
            });
        }

        // Function to render the bar chart for shopping frequency
        function renderBarChart(data) {
            const canvas = document.getElementById('bar-chart-canvas');
            const legend = document.getElementById('bar-chart-legend');
            const ctx = canvas.getContext('2d');
            
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            legend.innerHTML = '';

            if (!data || data.length === 0) {
                return;
            }

            const frequencyCounts = {};
            data.forEach(item => {
                const frequency = item.shopping_frequency;
                if (frequency && typeof frequency === 'string' && frequency.trim() !== '') {
                    frequencyCounts[frequency] = (frequencyCounts[frequency] || 0) + 1;
                }
            });

            const frequencies = Object.keys(frequencyCounts).sort();
            if (frequencies.length === 0) {
                return;
            }
            
            const maxCount = Math.max(...Object.values(frequencyCounts));
            const colors = ['#3B82F6', '#22C55E', '#EF4444', '#F59E0B', '#8B5CF6', '#EC4899'];
            
            const barWidth = (canvas.width / frequencies.length) * 0.7;
            const gap = (canvas.width - (barWidth * frequencies.length)) / (frequencies.length + 1);
            
            ctx.fillStyle = '#6B7280';
            ctx.font = '12px Inter';
            ctx.textAlign = 'center';
            
            frequencies.forEach((frequency, index) => {
                const count = frequencyCounts[frequency];
                const barHeight = (count / maxCount) * (canvas.height - 40);
                const x = gap + (barWidth + gap) * index;
                const y = canvas.height - barHeight - 20;
                const color = colors[index % colors.length];

                // Draw bar
                ctx.fillStyle = color;
                ctx.fillRect(x, y, barWidth, barHeight);

                // Draw count label on top of the bar
                ctx.fillStyle = '#1F2937';
                ctx.fillText(count, x + barWidth / 2, y - 5);

                // Draw frequency label below the bar
                ctx.fillStyle = '#4B5563';
                ctx.fillText(frequency, x + barWidth / 2, canvas.height - 5);
                
                // Create legend item
                const legendItem = document.createElement('div');
                legendItem.className = 'flex items-center gap-2';
                legendItem.innerHTML = `
                    <div class="w-3 h-3 rounded-full" style="background-color: ${color};"></div>
                    <span>${frequency}</span>
                `;
                legend.appendChild(legendItem);
            });
        }

        // Function to render the filterable data table
        function renderTable(dataToRender) {
            const tableHead = document.querySelector('#data-table thead');
            const tableBody = document.querySelector('#data-table tbody');
            tableHead.innerHTML = '';
            tableBody.innerHTML = '';

            // Render table headers
            if (headers.length > 0) {
                const headerRow = document.createElement('tr');
                headers.forEach(header => {
                    const th = document.createElement('th');
                    th.textContent = thaiHeaders[header] || header;
                    headerRow.appendChild(th);
                });
                tableHead.appendChild(headerRow);
            }

            // Render table rows
            dataToRender.forEach(item => {
                const tr = document.createElement('tr');
                headers.forEach(header => {
                    const td = document.createElement('td');
                    td.textContent = item[header];
                    tr.appendChild(td);
                });
                tableBody.appendChild(tr);
            });
        }

        // Main function to render the entire dashboard
        function renderDashboard(data) {
            parsedData = data;
            renderSummaryCards(parsedData);
            renderPieChart(parsedData);
            renderBarChart(parsedData);
            renderTable(parsedData);
        }

        // --- Event Listeners and Initial Setup ---

        document.addEventListener('DOMContentLoaded', () => {
            const googleSheetUrl = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vTB9r2UUfHMrC6383CGGHvai1gR4KbBTTsjONulNcaM1XVRnue4NlPbq_3WnxJ5fhU3SyM6PxXpVO9D/pub?gid=1267155999&single=true&output=csv';
            const filterInput = document.getElementById('filter-input');
            const loadingIndicator = document.getElementById('loading-indicator');

            // Function to fetch data and render the dashboard
            async function fetchDataAndRender() {
                loadingIndicator.style.display = 'block';
                try {
                    const response = await fetch(googleSheetUrl);
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    const csvString = await response.text();
                    const data = parseCsv(csvString);
                    renderDashboard(data);
                } catch (error) {
                    console.error('Error fetching or parsing data:', error);
                    const errorMessage = document.createElement('p');
                    errorMessage.textContent = 'ไม่สามารถโหลดข้อมูลได้ กรุณาลองใหม่ภายหลัง';
                    errorMessage.className = 'mt-4 text-center text-red-500 font-bold';
                    loadingIndicator.replaceWith(errorMessage);
                } finally {
                    loadingIndicator.style.display = 'none';
                }
            }

            // Initial data fetch
            fetchDataAndRender();

            // Filter functionality
            filterInput.addEventListener('keyup', (e) => {
                const filterValue = e.target.value.toLowerCase();
                const filteredData = parsedData.filter(item => {
                    return Object.values(item).some(value => {
                        return String(value).toLowerCase().includes(filterValue);
                    });
                });
                renderTable(filteredData);
            });
        });
    </script>
</body>
</html>
